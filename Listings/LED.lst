C51 COMPILER V9.59.0.0   LED                                                               05/06/2024 22:50:40 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN .\Objects\LED.obj
COMPILER INVOKED BY: E:\Keil_v5\C51\BIN\C51.EXE LED.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\LED.l
                    -st) TABS(2) OBJECT(.\Objects\LED.obj)

line level    source

   1          /******************************************************************************/
   2          /*                                                                            */
   3          /*                   RTX_EX1.C:  The first RTX-51 Program                     */
   4          /*                                                                            */
   5          /******************************************************************************/
   6          
   7          #include <rtx51tny.h>                 /* RTX-51 tiny functions & defines      */
   8          #include <reg52.h>
   9          unsigned char NT[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
  10          unsigned char NNT[] = {7,1,2,3,4,5,6,7};
  11          long counter0;                        /* counter for task 0                   */
  12          long counter1;                        /* counter for task 1                   */
  13          long counter2;                        /* counter for task 2                   */
  14          
  15          sbit P2_0 = P2^0;
  16          sbit P2_1 = P2^1;
  17          sbit P2_2 = P2^2;
  18          sbit P2_3 = P2^3;
  19          sbit P2_4 = P2^4;
  20          
  21          /******************************************************************************/
  22          /*       Task 0 'job0':  RTX-51 tiny starts execution with task 0             */
  23          /******************************************************************************/
  24          
  25          NIXIE () _task_ 0  {                  
  26   1        os_create_task (1);                 /* start task 1                         */
  27   1        os_create_task (2);                 /* start task 2                         */
  28   1      
  29   1        while (1)  {                        /* endless loop                         */
  30   2                           /* increment counter 0                  */
  31   2          os_wait2(K_TMO, 1);
  32   2          switch(counter0+1)
  33   2          {
  34   3              case 1:P2_4=1;P2_3=1;P2_2=1;break;
  35   3              case 2:P2_4=1;P2_3=1;P2_2=0;break;
  36   3              case 3:P2_4=1;P2_3=0;P2_2=1;break;
  37   3              case 4:P2_4=1;P2_3=0;P2_2=0;break;
  38   3              case 5:P2_4=0;P2_3=1;P2_2=1;break;
  39   3              case 6:P2_4=0;P2_3=1;P2_2=0;break;
  40   3              case 7:P2_4=0;P2_3=0;P2_2=1;break;
  41   3              case 8:P2_4=0;P2_3=0;P2_2=0;break;
  42   3          }
  43   2          P0=NT[NNT[counter0]];
  44   2          counter0++;  
  45   2          counter0=counter0%8;
  46   2        }
  47   1      }
  48          
  49          /******************************************************************************/
  50          /*    Task 1 'job1':  RTX-51 tiny starts this task with os_create_task (1)    */
  51          /******************************************************************************/
  52          job1 () _task_ 1  {
  53   1        while (1)  {                        /* endless loop                         */
  54   2          counter1++;                       /* increment counter 1                  */
C51 COMPILER V9.59.0.0   LED                                                               05/06/2024 22:50:40 PAGE 2   

  55   2          os_wait2(K_TMO, 200);
  56   2      
  57   2        }
  58   1      }
  59          
  60          /******************************************************************************/
  61          /*    Task 2 'job2':  RTX-51 tiny starts this task with os_create_task (2)    */
  62          /******************************************************************************/
  63          job2 () _task_ 2  {
  64   1        while (1)  {                        /* endless loop                         */
  65   2          counter2++;                       /* increment counter 2                  */
  66   2          os_wait2(K_TMO, 200);
  67   2      
  68   2        }
  69   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    272    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     30    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
